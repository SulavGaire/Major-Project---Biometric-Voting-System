#include <WebServer.h>
#include <WiFi.h>
#include <esp32cam.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
// ESP32-CAM doesn't have dedicated i2c pins, so we define our own. Let's choose 15 and 14
#define I2C_SDA 15
#define I2C_SCL 14
TwoWire I2Cbus = TwoWire(0);

// Display defines
#define SCREEN_WIDTH    128
#define SCREEN_HEIGHT   64
#define OLED_RESET      -1
#define SCREEN_ADDRESS  0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &I2Cbus, OLED_RESET);

#define FRAME_DELAY (42)
#define FRAME_WIDTH (32)
#define FRAME_HEIGHT (32)
// #define FRAME_COUNT (sizeof(click) / sizeof(click[0]))
int frame = 0;
const byte PROGMEM photo[][128] = {
  {0,0,0,0,0,0,0,0,1,128,1,128,15,192,3,240,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,15,192,3,240,1,128,1,128,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,1,128,1,128,15,192,3,240,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,15,192,3,240,1,128,1,128,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,15,192,3,240,28,0,0,56,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,24,0,0,8,12,0,0,24,7,192,3,240,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,3,224,7,192,15,192,3,240,8,0,0,16,24,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,16,0,0,8,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,24,8,16,24,24,15,240,24,24,1,128,24,24,0,0,24,24,0,0,24,8,0,0,24,15,192,3,240,3,224,7,192,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,3,224,7,192,15,192,3,240,8,0,0,16,24,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,16,0,0,8,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,24,8,16,24,24,15,240,24,24,1,128,24,24,0,0,24,24,0,0,24,8,0,0,16,7,192,3,240,3,224,7,192,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,7,192,3,224,31,128,1,248,48,0,0,8,48,0,0,12,32,0,0,4,32,0,0,4,32,0,0,4,32,0,0,4,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,0,8,16,0,32,15,240,4,32,1,128,4,32,0,0,4,32,0,0,4,48,0,0,12,16,0,0,12,31,128,1,248,7,192,3,224,0,0,0,0,0,0,0,0},
  {0,0,0,0,63,0,0,252,96,0,0,6,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,0,8,16,0,0,15,240,0,64,1,128,2,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,96,0,0,6,63,0,0,252,0,0,0,0},
  {31,0,0,248,126,0,0,126,192,0,0,3,192,0,0,3,128,0,0,1,128,0,0,1,128,0,0,1,128,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,0,8,16,0,0,15,240,0,0,1,128,0,128,0,0,1,128,0,0,1,128,0,0,1,128,0,0,1,192,0,0,3,64,0,0,3,126,0,0,126,31,0,0,252},
  {6,0,0,96,63,0,0,252,96,0,0,6,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,0,8,16,0,0,15,240,0,0,1,128,0,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,96,0,0,2,63,0,0,254,6,0,0,96},
  {0,0,0,0,15,128,1,240,31,0,0,248,32,0,0,4,96,0,0,6,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,2,64,0,0,2,64,0,0,2,64,0,0,2,96,0,0,6,32,0,0,4,31,0,0,248,15,128,1,240,0,0,0,0},
  {0,0,0,0,0,0,0,0,3,224,7,192,7,0,0,224,8,0,0,48,16,0,0,8,48,0,0,12,32,0,0,4,32,0,0,4,32,0,0,4,32,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,4,32,0,0,4,32,0,0,4,32,0,0,4,32,0,0,12,48,0,0,12,16,0,0,24,8,0,0,48,6,0,0,224,3,224,7,192,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,248,31,0,1,128,1,128,3,0,0,224,4,0,0,32,12,0,0,48,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,0,0,0,48,0,0,0,24,0,0,0,12,0,0,16,4,0,8,16,0,0,8,16,0,0,8,16,0,0,24,8,0,0,16,12,0,0,48,4,0,0,96,7,0,0,192,1,128,1,128,0,248,30,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,31,248,0,0,112,14,0,0,192,3,0,3,0,1,128,2,0,0,64,4,0,0,96,12,0,0,48,8,0,0,16,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,32,32,8,16,48,96,8,16,24,192,8,16,13,128,8,16,7,0,8,24,2,0,24,8,0,0,16,12,0,0,48,4,0,0,96,2,0,0,64,3,0,1,128,0,192,3,0,0,112,14,0,0,31,248,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,31,248,0,0,112,14,0,0,192,3,0,3,0,1,128,2,0,0,64,4,0,0,96,12,0,0,48,8,0,2,16,24,0,4,24,16,0,12,8,16,0,24,8,16,0,16,8,16,32,32,8,16,48,96,8,16,24,192,8,16,13,128,8,16,7,0,8,24,2,0,24,8,0,0,16,12,0,0,48,4,0,0,96,2,0,0,64,3,0,1,128,0,192,3,0,0,112,14,0,0,31,248,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,31,248,0,0,112,14,0,0,192,3,0,3,0,1,128,2,0,0,64,4,0,0,96,12,0,0,48,8,0,2,16,24,0,4,24,16,0,12,8,16,0,24,8,16,0,16,8,16,32,32,8,16,48,96,8,16,24,192,8,16,13,128,8,16,7,0,8,24,2,0,24,8,0,0,16,12,0,0,48,4,0,0,96,2,0,0,64,3,0,1,128,0,192,3,0,0,112,14,0,0,31,248,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,31,248,0,0,112,14,0,0,192,3,0,3,0,1,128,2,0,0,64,4,0,0,96,12,0,0,48,8,0,2,16,24,0,4,24,16,0,12,8,16,0,24,8,16,0,16,8,16,32,32,8,16,48,96,8,16,24,192,8,16,13,128,8,16,7,0,8,24,2,0,24,8,0,0,16,12,0,0,48,4,0,0,96,2,0,0,64,3,0,1,128,0,192,3,0,0,112,14,0,0,31,248,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,31,248,0,0,112,14,0,0,192,3,0,3,0,1,128,2,0,0,64,4,0,0,96,12,0,0,48,8,0,2,16,24,0,4,24,16,0,12,8,16,0,24,8,16,0,16,8,16,32,32,8,16,48,96,8,16,24,192,8,16,13,128,8,16,7,0,8,24,2,0,24,8,0,0,16,12,0,0,48,4,0,0,96,2,0,0,64,3,0,1,128,0,192,3,0,0,112,14,0,0,31,248,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,31,248,0,0,112,14,0,0,192,3,0,3,0,1,128,2,0,0,64,4,0,0,96,12,0,0,48,8,0,2,16,24,0,4,24,16,0,12,8,16,0,24,8,16,0,16,8,16,32,32,8,16,48,96,8,16,24,192,8,16,13,128,8,16,7,0,8,24,2,0,24,8,0,0,16,12,0,0,48,4,0,0,96,2,0,0,64,3,0,1,128,0,192,3,0,0,112,14,0,0,31,248,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,31,248,0,0,112,14,0,0,192,3,0,3,0,1,128,2,0,0,64,4,0,0,96,12,0,0,48,8,0,2,16,24,0,4,24,16,0,12,8,16,0,24,8,16,0,16,8,16,32,32,8,16,48,96,8,16,24,192,8,16,13,128,8,16,7,0,8,24,2,0,24,8,0,0,16,12,0,0,48,4,0,0,96,2,0,0,64,3,0,1,128,0,192,3,0,0,112,14,0,0,31,248,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,31,248,0,0,112,14,0,0,192,3,0,3,0,1,128,2,0,0,64,4,0,0,96,12,0,0,48,8,0,0,16,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,32,32,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,24,2,0,24,8,0,0,16,12,0,0,48,4,0,0,96,2,0,0,64,3,0,1,128,0,192,3,0,0,112,14,0,0,31,248,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,6,48,0,0,62,60,0,0,224,7,0,1,128,1,128,3,0,0,192,6,0,0,64,4,0,0,32,12,0,0,48,8,0,0,16,8,0,0,16,24,0,0,24,0,0,0,16,0,0,0,0,0,0,0,0,24,0,0,24,8,0,0,16,8,0,0,16,8,0,0,16,12,0,0,32,4,0,0,96,6,0,0,64,3,0,0,128,1,128,1,128,0,240,6,0,0,62,60,0,0,14,32,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,240,15,0,3,128,1,192,6,0,0,96,12,0,0,48,8,0,0,16,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,8,0,0,16,12,0,0,48,6,0,0,96,3,0,1,192,0,240,15,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,1,128,1,128,15,192,3,240,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,15,192,3,240,1,128,1,128,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,1,128,1,128,15,192,3,240,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,15,192,3,240,1,128,1,128,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,1,128,1,128,15,192,3,240,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,15,192,3,240,1,128,1,128,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,1,128,1,128,15,192,3,240,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,15,192,3,240,1,128,1,128,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,1,128,1,128,15,192,3,240,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,15,192,3,240,1,128,1,128,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,1,128,1,128,15,192,3,240,24,0,0,24,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,16,0,0,8,0,0,0,0,0,0,0,0,0,32,132,0,0,32,132,0,0,32,132,0,0,0,128,0,0,0,128,0,0,0,128,0,0,3,128,0,0,0,0,0,0,0,0,0,16,8,16,8,16,15,240,8,16,1,128,8,16,0,0,8,16,0,0,8,16,0,0,8,24,0,0,24,15,192,3,240,1,128,1,128,0,0,0,0,0,0,0,0}
};
 
const char* WIFI_SSID = "B-LINK_14F3";
//const char* WIFI_SSID = "Redmi Note 9";
const char* WIFI_PASS = "Password@ 1";
 
WebServer server(80);
 
 
static auto loRes = esp32cam::Resolution::find(320, 240);
static auto midRes = esp32cam::Resolution::find(350, 530);
static auto hiRes = esp32cam::Resolution::find(800, 600);
void clickAnimation(const byte* click , int FRAME_COUNT)
{ 
  // FRAME_COUNT = (sizeof(click) / sizeof(click[0]))
  for (int i = 0; i < FRAME_COUNT; i++)
 {
    display.clearDisplay();
    display.drawBitmap(48, 16, &click[i], FRAME_WIDTH, FRAME_HEIGHT, 1);
    display.display();
    delay(FRAME_DELAY);
 }
}
 
void serveJpg()
{
  auto frame = esp32cam::capture();
  if (frame == nullptr) {
    Serial.println("CAPTURE FAIL");
    server.send(503, "", "");
    return;
  }
  Serial.printf("CAPTURE OK %dx%d %db\n", frame->getWidth(), frame->getHeight(),
                static_cast<int>(frame->size()));
 
  server.setContentLength(frame->size());
  server.send(200, "image/jpeg");
  WiFiClient client = server.client();
  frame->writeTo(client);
  clickAnimation((const byte*)photo , sizeof(photo) / sizeof(photo[0]));
}
 
void handleJpgLo()
{
  if (!esp32cam::Camera.changeResolution(loRes)) {
    Serial.println("SET-LO-RES FAIL");
  }
  serveJpg();
}
 
void handleJpgHi()
{
  if (!esp32cam::Camera.changeResolution(hiRes)) {
    Serial.println("SET-HI-RES FAIL");
  }
  serveJpg();
}
 
void handleJpgMid()
{
  if (!esp32cam::Camera.changeResolution(midRes)) {
    Serial.println("SET-MID-RES FAIL");
  }
  serveJpg();
}

void  setup(){
  Serial.begin(115200);
  Serial.println();
  {
    using namespace esp32cam;
    Config cfg;
    cfg.setPins(pins::AiThinker);
    cfg.setResolution(hiRes);
    cfg.setBufferCount(2);
    cfg.setJpeg(80);
 
    bool ok = Camera.begin(cfg);
    Serial.println(ok ? "CAMERA OK" : "CAMERA FAIL");
  }
  WiFi.persistent(false);
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
  Serial.print("http://");
  Serial.println(WiFi.localIP());
  Serial.println("  /cam-lo.jpg");
  Serial.println("  /cam-hi.jpg");
  Serial.println("  /cam-mid.jpg");
 
  server.on("/cam-lo.jpg", handleJpgLo);
  server.on("/cam-hi.jpg", handleJpgHi);
  server.on("/cam-mid.jpg", handleJpgMid);
 
  server.begin();
    // Initialize I2C with our defined pins
  I2Cbus.begin(I2C_SDA, I2C_SCL, 100000);

  Serial.println("Initialize display");

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    Serial.printf("SSD1306 OLED display failed to initalize.\nCheck that display SDA is connected to pin %d and SCL connected to pin %d\n", I2C_SDA, I2C_SCL);
    while (true);
  }
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(3);
  display.setTextColor(SSD1306_WHITE);
  display.print("Voting Machine");
  display.display();
  delay(2000);
}

void loop()
{
  server.handleClient();
}